from config import API_KEY
from functions import *
from loguru import logger
import requests
import time
import telebot
from telebot import types
import datetime as dt


def get_price_coin(coin):
    url = 'https://api.coinlore.net/api/ticker/'
    response = requests.get(url, params={'id': coin})
    price = response.json()[0]['price_usd']
    price_change_24h = response.json()[0]['percent_change_24h']

    return price, price_change_24h

dict_val = {"USD": 840, "EUR": 978, "CAD": 124, "GBP": 826, "PLN": 985}


def get_final_answer_rates(*, code: str) -> str:
    """
    func return final frase of answer a rates of choice currency
    :param code: choice currency
    :return: string of answer
    """
    date = dt.datetime.today().strftime('%d-%m-%Y %H:%M')
    phrase = f'–Ω–∞ {date}:\n\n'
    # –∫—É—Ä—Å –ù–ë–£
    phrase += f'–ö—É—Ä—Å –ù–ë–£: {get_rate_nbu(valcode=code)[0]}\n'

    # –∫—É—Ä—Å –º–æ–Ω–æ–±–∞–Ω–∫–∞
    if get_rate_mono(valcode=code)[2] is None:
        phrase += f'–ö—É—Ä—Å –ú–æ–Ω–æ–±–∞–Ω–∫–∞ (–∫–∞—Ä—Ç—ã): {get_rate_mono(valcode=code)[0]} - {get_rate_mono(valcode=code)[1]}\n'
    else:
        phrase += f'–ö—É—Ä—Å –ú–æ–Ω–æ–±–∞–Ω–∫–∞ (–∫—Ä–æ—Å—Å): {get_rate_mono(valcode=code)[2]}\n'

    # –∫—É—Ä—Å –ø—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞
    if get_rate_privat_cash(valcode=code) or get_rate_privat_cards(valcode=code):
        phrase += f'–ö—É—Ä—Å –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞ (–∫–∞—Å—Å–∞): {get_rate_privat_cash(valcode=code)[0]} - {get_rate_privat_cash(valcode=code)[1]}\n'
        phrase += f'–ö—É—Ä—Å –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞ (–∫–∞—Ä—Ç—ã): {get_rate_privat_cards(valcode=code)[0]} - {get_rate_privat_cards(valcode=code)[1]}'
    else:
        phrase += f'–ö—É—Ä—Å—ã –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'

    return phrase


bot = telebot.TeleBot(API_KEY)
logger.add('log.txt', format="{time};{level};{message} ")


@bot.message_handler(commands=['start'])
def start(message):
    logger.info(f"{message.from_user.full_name};{message.from_user.id};{message.text}")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    btn2 = types.KeyboardButton("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id,
                     text=f"<em><b>{message.from_user.first_name}</b>, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç</em>",
                     reply_markup=markup, parse_mode='HTML')


@bot.message_handler(context_types=['text'])
def return_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    btn2 = types.KeyboardButton("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id,
                     text=f"<em>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç</em>", reply_markup=markup, parse_mode='HTML')


@bot.message_handler(content_types=['text'])
def speak(message):
    logger.info(f"{message.from_user.full_name};{message.from_user.id};{message.text}")

    # —ç—Ç–æ –±–ª–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    if message.text == "–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton("Bitcoin <-> USD")
        btn2 = types.KeyboardButton("Ethereum <-> USD")
        btn3 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.from_user.id,
                         text=f"<em><b>{message.from_user.first_name}</b>, –∫—É—Ä—Å –∫–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç)</em>",
                         reply_markup=markup, parse_mode='HTML')
    elif message.text == "Bitcoin <-> USD":
        bot.send_message(message.from_user.id, f"–ü–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ {dt.datetime.now()} \n "
                                               f"–∫—É—Ä—Å: <b>{get_price_coin(90)[0]}</b>, "
                                               f"–∏–∑–º–µ–Ω. –∑–∞ 24 —á–∞—Å–∞ <b>{get_price_coin(90)[1]}</b>% ", parse_mode='HTML')
    elif message.text == "Ethereum <-> USD":
        bot.send_message(message.from_user.id, f"–ü–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ {dt.datetime.now()} \n "
                                               f"–∫—É—Ä—Å: <b>{get_price_coin(80)[0]}</b>, "
                                               f"–∏–∑–º–µ–Ω. –∑–∞ 24 —á–∞—Å–∞ <b>{get_price_coin(80)[1]}</b> %", parse_mode='HTML')

    # —ç—Ç–æ –±–ª–æ–∫ –∫—É—Ä—Å–æ–≤ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
    elif message.text == "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
        btn1 = types.KeyboardButton("üá∫üá∏ USD")
        btn2 = types.KeyboardButton("üá™üá∫ EUR")
        btn3 = types.KeyboardButton("üá®üá¶ CAD")
        btn4 = types.KeyboardButton("üá¨üáß GBP")
        btn5 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.from_user.id,
                         text=f"{message.from_user.first_name}, –∫—É—Ä—Å –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç)",
                         reply_markup=markup)
    elif message.text == "üá∫üá∏ USD":
        bot.send_message(message.from_user.id, f'{get_final_answer_rates(code='USD')}')
    elif message.text == "üá™üá∫ EUR":
        bot.send_message(message.from_user.id, f'{get_final_answer_rates(code='EUR')}')
    elif message.text == "üá®üá¶ CAD":
        bot.send_message(message.from_user.id, f'{get_final_answer_rates(code='CAD')}')
    elif message.text == "üá¨üáß GBP":
        bot.send_message(message.from_user.id, f'{get_final_answer_rates(code='CAD')}')
    elif message.text == "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_main_menu(message)
    else:
        bot.send_message(message.from_user.id, message.text)
    # if message.text.lower() in '0123456789':
    #     # bot.send_message(message.chat.id, '–ò –≤—Å–µ —Ç–∞–∫–∏ –ø–æ—Ä–∞ —Å–ø–∞—Ç—å')
    #     bot.send_message(message.chat.id, f'–ò –≤—Å–µ —Ç–∞–∫–∏ –ø–æ—Ä–∞ —Å–ø–∞—Ç—å. –ê –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - —Ç–≤–æ–π ID: {message.from_user.id}')
    # elif message.text.lower() in '9876543210':
    #     markup = telebot.types.InlineKeyboardMarkup()
    #     btn1 = telebot.types.InlineKeyboardButton(text='–°–∞–π—Ç –ù–ë–£', url='https://bank.gov.ua/')
    #     markup.add(btn1)
    #     bot.send_message(message.from_user.id, '–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ù–ë–£', reply_markup=markup)
    # else:
    #     bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é —Ü–∏—Ñ—Ä—É: ')


@bot.message_handler(content_types=['sticker', 'animation'])
def sticker(message):
    logger.debug(f"{message.from_user.full_name};{message.from_user.id};{message.text}")
    bot.send_message(message.from_user.id, f"–í–∞—É! –ö–∞–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞!  ‚ù§Ô∏è")


if __name__ == '__main__':
    # bot.polling(none_stop=True, interval=2)
    while True:
        try:
            logger.info(f"Bot running..")
            bot.polling(none_stop=True, interval=2)

            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –º–∏—Ä–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø–æ—ç—Ç–æ–º—É
            # –¥–∞–µ–º –≤—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞
            break
        except telebot.apihelper.ApiException as e:
            logger.error(f"Bot has error: {e}")
            bot.stop_polling()

            time.sleep(5)

            logger.info(f"Running again!")