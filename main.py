import time
import json
import datetime as dt

import requests
from loguru import logger
from telebot import types
from telebot.types import Message

from config import API_KEY, ADMIN_ID, BASE_URL
from functions import *
from my_classses import *

import telebot


def get_final_answer_coins(*, coin_name: str) -> str:
    """
    :param coin_name: string name of coin
    :return: string answer of info coin
    """

    cur_date = dt.datetime.today().strftime('%d-%m-%Y %H:%M:%S')
    price_coin = get_price_coin(coin_name=coin_name)
    phrase = (f'–Ω–∞ {cur_date}:\n'
              f'{coin_name}\n'
              f'–ö—É—Ä—Å –≤ USDT: {price_coin[0]}\n'
              f'–∏–∑–º–µ–Ω–µ–Ω–∏—è:\n'
              f'- –∑–∞ 1 —á–∞—Å: {price_coin[1]} %\n'
              f'- –∑–∞ 24 —á–∞—Å–∞: {price_coin[2]} %\n'
              f'- –∑–∞ 7 –¥–Ω–µ–π: {price_coin[3]} %')

    return phrase


def get_final_answer_rates(*, code: str, message: Message) -> str:
    """
    func return final frase of answer a rates of choice currency
    :param code: code of currency
    :param message: message
    :return: string of answer
    """

    mes_id_del = bot.send_message(message.from_user.id, text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç....").id

    cur_date = dt.datetime.today().strftime('%d-%m-%Y %H:%M:%S')
    # –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –ù–ë–£
    rate_nbu = get_rate_nbu(valcode=code)
    # –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –º–æ–Ω–æ–±–∞–Ω–∫–∞
    rate_mono = get_rate_mono(valcode=code)
    # –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –ø—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞
    rate_privat_cash = get_rate_privat_cash(valcode=code)
    rate_privat_card = get_rate_privat_cards(valcode=code)
    # –ø–æ–ª—É—á–∞–µ–º –æ–ø—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞
    if code == "USD" or code == "EUR":
        rate_kit = get_rate_wholesale(valcode=code)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    phrase = f'–Ω–∞ {cur_date}:\n–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã {code}:\n'
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –ù–ë–£
    phrase += f'- –ù–ë–£: {rate_nbu[0]}\n'
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –º–æ–Ω–æ–±–∞–Ω–∫–∞
    if rate_mono[2] is None:
        phrase += f'- –ú–æ–Ω–æ–±–∞–Ω–∫ (–∫–∞—Ä—Ç—ã): {rate_mono[0]} - {rate_mono[1]}\n'
    else:
        phrase += f'- –ú–æ–Ω–æ–±–∞–Ω–∫ (–∫—Ä–æ—Å—Å): {rate_mono[2]}\n'
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –ø—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞
    if rate_privat_cash or rate_privat_card:
        phrase += f'- –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫ (–∫–∞—Å—Å–∞): {rate_privat_cash[0]} - {rate_privat_cash[1]}\n'
        phrase += f'- –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫ (–∫–∞—Ä—Ç—ã): {rate_privat_card[0]} - {rate_privat_card[1]}'
    else:
        phrase += f'–ö—É—Ä—Å—ã –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'

    # –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã, —Ç–æ–ª—å–∫–æ –¥–ª—è USD –∏ EUR
    if code == "USD" or code == "EUR":
        phrase += f"\n- –û–ø—Ç–æ–≤—ã–π –æ–±–º–µ–Ω–Ω–∏–∫: {rate_kit[0]} - {rate_kit[1]} "

    bot.delete_message(message.chat.id, mes_id_del)

    return phrase


telegram_client = TelegramClient(API_KEY, base_url=BASE_URL)
bot = MyBot(token=API_KEY, telegram_client=telegram_client)

logger.add(logger_path, format="{time};{level};{message} ")


@bot.message_handler(commands=['start'])
def start(message: Message):
    logger.info(f"{message.from_user.full_name};{message.from_user.id};{message.text}")

    with open(users_path, 'r') as f:
        data_from_json = json.load(f)

    user_id = message.from_user.id
    user_name = message.from_user.full_name
    if str(user_id) not in data_from_json:
        data_from_json[user_id] = {"user_name": user_name}

        with open(users_path, 'w') as f:
            json.dump(data_from_json, f, indent=4, ensure_ascii=False)

        bot.reply_to(message=message, text=f"{user_name}, –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                                       f"–í–∞—à user_id: {user_id}")

        logger.info(f"User {user_name};{user_id}; was registrated!")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    btn2 = types.KeyboardButton("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id,
                     text=f"<em><b>{message.from_user.first_name}</b>, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, "
                          f"–∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç</em>",
                     reply_markup=markup, parse_mode='HTML')

@bot.message_handler(commands=["help"])
def help_content(message: Message):
    bot.send_message(message.from_user.id, text="–≠—Ç–æ –±–æ—Ç —É–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
                                                "1. –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –±–∞–Ω–∫–æ–≤:\n"
                                                "–ù–ë–£ https://bank.gov.ua/ua/markets/exchangerates,\n"
                                                "–ú–æ–Ω–æ–±–∞–Ω–∫–∞ https://www.monobank.ua/?lang=uk,\n"
                                                "–ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫–∞ https://privatbank.ua/ \n\n"
                                                "2. –ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–Ω–µ—Ç "
                                                "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ—Ç CoinLore https://www.coinlore.com/", disable_web_page_preview=True)


@bot.message_handler(context_types=['text'])
def return_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    btn2 = types.KeyboardButton("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id,
                     text=f"<em>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç</em>", reply_markup=markup, parse_mode='HTML')


@bot.message_handler(content_types=['text'])
def speak(message):
    logger.info(f"{message.from_user.full_name};{message.from_user.id};{message.text}")

    # —ç—Ç–æ –±–ª–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    if message.text == "–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        btn1 = types.KeyboardButton("BTC")
        btn2 = types.KeyboardButton("ETH")
        btn3 = types.KeyboardButton("TON")
        btn4 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(message.from_user.id,
                         text=f"<em><b>{message.from_user.first_name}</b>, –∫—É—Ä—Å –∫–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç)</em>",
                         reply_markup=markup, parse_mode='HTML')
    elif message.text == "BTC":
        bot.send_message(message.from_user.id, f'{get_final_answer_coins(coin_name="BTC")}')
    elif message.text == "ETH":
        bot.send_message(message.from_user.id, f'{get_final_answer_coins(coin_name="ETH")}')
    elif message.text == "TON":
        bot.send_message(message.from_user.id, f'{get_final_answer_coins(coin_name="TON")}')

    # —ç—Ç–æ –±–ª–æ–∫ –∫—É—Ä—Å–æ–≤ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
    elif message.text == "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
        btn1 = types.KeyboardButton("üá∫üá∏ USD")
        btn2 = types.KeyboardButton("üá™üá∫ EUR")
        btn3 = types.KeyboardButton("üá®üá¶ CAD")
        btn4 = types.KeyboardButton("üá¨üáß GBP")
        btn5 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.from_user.id,
                         text=f"{message.from_user.first_name}, –∫—É—Ä—Å –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç)",
                         reply_markup=markup)
    elif message.text == "üá∫üá∏ USD":
        bot.send_message(message.from_user.id, f'{get_final_answer_rates(code="USD", message=message)}')
    elif message.text == "üá™üá∫ EUR":
        bot.send_message(message.from_user.id, f'{get_final_answer_rates(code="EUR", message=message)}')
    elif message.text == "üá®üá¶ CAD":
        bot.send_message(message.from_user.id, f'{get_final_answer_rates(code="CAD", message=message)}')
    elif message.text == "üá¨üáß GBP":
        bot.send_message(message.from_user.id, f'{get_final_answer_rates(code="GBP", message=message)}')
    elif message.text == "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return_main_menu(message)
    else:
        bot.send_message(message.from_user.id, message.text)


@bot.message_handler(content_types=['sticker', 'animation'])
def sticker(message):
    logger.debug(f"{message.from_user.full_name};{message.from_user.id};{message.text}")
    # bot.send_message(message.from_user.id, f"–í–∞—É! –ö–∞–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞!  ‚ù§Ô∏è")
    bot.reply_to(message, f"–í–∞—É! –ö–∞–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞!  ‚ù§Ô∏è")


if __name__ == '__main__':

    # bot.polling(none_stop=True, interval=2)

    # bot.infinity_polling(timeout=10, long_polling_timeout=5)

    def create_err_message(err):
        return f"{dt.datetime.now()}:::\n{err.__class__}:::\n{err}"


    while True:
        try:
            logger.info(f"Bot running..")
            bot.polling(none_stop=True, interval=2)

            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –º–∏—Ä–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø–æ—ç—Ç–æ–º—É
            # –¥–∞–µ–º –≤—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞
            break
        # except telebot.apihelper.ApiTelegramException as e:
        except Exception as err:
            # requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='api.telegram.org', port=443):
            # Read timed out.(read timeout = 25)
            logger.error(f"Bot has error: {err.__class__}:::{err}")
            bot.telegram_client.post(method="sendMessage", params={'chat_id': ADMIN_ID,
                                                                 "text": create_err_message(err)})

            # requests.post(f"https://api.telegram.org/bot{API_KEY}/"
            #               f"sendMessage?chat_id=228927462&text={dt.datetime.now()}:::{err.__class__}:::{e}")
            bot.stop_polling()

            time.sleep(5)

            logger.info(f"Running again!")